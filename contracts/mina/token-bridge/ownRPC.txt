
> @nori-zk/mina-token-bridge@0.2.15 test
> npm run build && node --experimental-vm-modules --experimental-wasm-modules --max-old-space-size=8192 ../../../node_modules/jest/bin/jest.js  --forceExit -- src/micro/devnet.without-infra.spec.ts


> @nori-zk/mina-token-bridge@0.2.15 build
> npm run clean && tsc


> @nori-zk/mina-token-bridge@0.2.15 clean
> rimraf target

(node:96260) ExperimentalWarning: VM Modules is an experimental feature and might change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
  console.log
    Deploying contract.

      at Object.<anonymous> (src/micro/devnet.without-infra.spec.ts:43:17)

Compiling all contracts/programs ...
Compiling ethVerifier contract/program.
ethVerifier compiled: 29.724s
ethVerifier contract/program vk hash compiled: '18898419980749081858185627310467310990096965437609867313373155526674043887824'
Compiling NoriStorageInterface contract/program.
NoriStorageInterface compiled: 2.769s
NoriStorageInterface contract/program vk hash compiled: '14379561584057867225985514309544439368108270617101127551298089924406583258432'
Compiling FungibleToken contract/program.
FungibleToken compiled: 5.857s
FungibleToken contract/program vk hash compiled: '11275266297357989434659649579180929660472107786900344600948115953037388411671'
Compiling NoriTokenController contract/program.
NoriTokenController compiled: 13.338s
NoriTokenController contract/program vk hash compiled: '13281787607340186303266815710518326329241156192874088413949835576874392493904'
All contracts compiled successfully.
All contracts/programs compiled successfully.
senderPrivateKeyBase58 true
Deploying NoriTokenController and TokenBase contracts...
Deploy transaction created. Proving...
Transaction proved. Signing and sending...
Contracts deployed successfully
  console.log
    tokenBaseAddressBase58 B62qkQtMj4T52fxMzKgD9rb16FFwzCiRtQVWZfWaxgyZcHhVQXZpcaj

      at Object.<anonymous> (src/micro/devnet.without-infra.spec.ts:79:17)

  console.log
    noriTokenControllerAddressBase58 B62qo7VVqfxZy6Ky7fbSSjDeCk4sYjva654YTax7YYTTWUQrrb36mdJ

      at Object.<anonymous> (src/micro/devnet.without-infra.spec.ts:80:17)

  console.log
    Fetching zkApp worker.

      at Object.<anonymous> (src/micro/devnet.without-infra.spec.ts:96:17)

  console.log
    Compiling dependancies of zkAppWorker

      at Object.<anonymous> (src/micro/devnet.without-infra.spec.ts:100:17)

Compiling all minter dependencies...
Compiling ethVerifier contract/program.
ethVerifier compiled: 8.385s
ethVerifier contract/program vk hash compiled: '18898419980749081858185627310467310990096965437609867313373155526674043887824'
Compiling NoriStorageInterface contract/program.
NoriStorageInterface compiled: 451.939ms
NoriStorageInterface contract/program vk hash compiled: '14379561584057867225985514309544439368108270617101127551298089924406583258432'
Compiling FungibleToken contract/program.
FungibleToken compiled: 3.269s
FungibleToken contract/program vk hash compiled: '11275266297357989434659649579180929660472107786900344600948115953037388411671'
Compiling NoriTokenController contract/program.
NoriTokenController compiled: 3.568s
NoriTokenController contract/program vk hash compiled: '13281787607340186303266815710518326329241156192874088413949835576874392493904'
All contracts compiled successfully.
All minter dependency contracts compiled successfully.
  console.log
    Awaited compilation of zkAppWorkerReady

      at Object.<anonymous> (src/micro/devnet.without-infra.spec.ts:113:17)

Error determining if we needed to setup storage. Going to assume that we do need to. Error: userKeyHash was falsey
    at ZkAppWorker.needsToSetupStorage (file:///Users/karol/Documents/2nori/nori-bridge-sdk/contracts/mina/token-bridge/target/src/micro/workers/zkAppWorker/worker.js:142:23)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async WorkerChildBase.onMessage (file:///Users/karol/Documents/2nori/nori-bridge-sdk/workers/build/src/index.js:217:28)
  console.log
    Setup storage required? 'true'

      at Object.<anonymous> (src/micro/devnet.without-infra.spec.ts:152:17)

  console.log
    Setting up storage

      at Object.<anonymous> (src/micro/devnet.without-infra.spec.ts:154:21)

MOCK_setupStorage called with {
  userPublicKeyBase58: 'B62qpC6aAiVAJehAD8aKeSE3H7MTKixnjRrWboqypFS9cRrRbBuQA68',
  noriTokenControllerAddressBase58: 'B62qo7VVqfxZy6Ky7fbSSjDeCk4sYjva654YTax7YYTTWUQrrb36mdJ',
  txFee: 100000000,
  storageInterfaceVerificationKeySafe: {
    hashStr: '14379561584057867225985514309544439368108270617101127551298089924406583258432',
    data: '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'
  }
}
Setting up storage for user: B62qpC6aAiVAJehAD8aKeSE3H7MTKixnjRrWboqypFS9cRrRbBuQA68
fetched accounts
got token controller inst
setup tx
provedTx {
  transaction: {
    feePayer: {
      body: [Object],
      authorization: '7mWxjLYgbJUkZNcGouvhVj5tJ8yu9hoexb9ntvPK8t5LHqzmrL6QJjjKtf5SgmxB4QWkDw7qoMMbbNGtHVpsbJHPyTy2EzRQ',
      lazyAuthorization: [Object]
    },
    accountUpdates: [ [AccountUpdate], [AccountUpdate], [AccountUpdate] ],
    memo: ''
  },
  sign: [Function: sign],
  prove: [Function: prove],
  toJSON: [Function: toJSON],
  toPretty: [Function: toPretty],
  toGraphqlQuery: [Function: toGraphqlQuery],
  send: [Function: send],
  safeSend: [AsyncFunction: safeSend],
  setFeePerSnarkCost: [Function: setFeePerSnarkCost],
  setFee: [Function: setFee],
  proofs: [
    undefined,
    _a {
      shouldVerify: [Bool],
      publicInput: [Object],
      publicOutput: undefined,
      proof: [Array],
      maxProofsVerified: 1
    },
    undefined
  ]
}
this.#minaPrivateKey PrivateKey {
  s: Scalar {
    lowBit: Bool { value: [Array] },
    high254: Field { value: [Array] }
  }
}
sent
result {
  status: 'included',
  transaction: {
    feePayer: {
      body: [Object],
      authorization: '7mXUpPMqxgvdN63BFdFpL9j9oe5Kb5EJ4ZXptTsyq7rDZmgtgqLiKKW8BKovx4aqk1R6ePjqKAHgZGKdi3W7xBuJW1GG5Ec1'
    },
    accountUpdates: [ [AccountUpdate], [AccountUpdate], [AccountUpdate] ],
    memo: ''
  },
  toJSON: [Function: toJSON],
  toPretty: [Function: toPretty],
  hash: '5JufkSv4TN1ZeUewGaH5crL8rYTZGGsgrZpx48mmGtcDYhzBDqja',
  data: { sendZkapp: { zkapp: [Object] } }
}
Storage setup completed successfully
  console.log
    setupTxHash 5JufkSv4TN1ZeUewGaH5crL8rYTZGGsgrZpx48mmGtcDYhzBDqja

      at Object.<anonymous> (src/micro/devnet.without-infra.spec.ts:177:21)

  console.time
    noriMinter.setupStorage: 170583 ms

      at Object.<anonymous> (src/micro/devnet.without-infra.spec.ts:178:21)

  console.log
    Computing eth verifier and calculating deposit witness.

      at Object.<anonymous> (src/micro/devnet.without-infra.spec.ts:182:17)

codeChallengeBEHex 0x21f24062c08fba67db16ed638cdae84d4c0d54999439fb0c59956fd6b8c9b96a
Fetching proof bundle for deposit with block number: 4432732
fetchResponse GET Response {
  status: 200,
  statusText: 'OK',
  headers: Headers {
    'alt-svc': 'h3=":443"; ma=2592000',
    'content-length': '42872',
    'content-type': 'application/json',
    date: 'Mon, 08 Sep 2025 11:33:31 GMT',
    uwebsockets: '20',
    via: '1.1 Caddy'
  },
  body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true },
  bodyUsed: false,
  ok: true,
  redirected: false,
  type: 'basic',
  url: 'https://pcs.nori.it.com/converted-consensus-mpt-proofs/4432732'
}
parsedjson {
  consensusMPTProofVerification: {
    vkData: {
      data: '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',
      hash: '16513322678631837892015513717531806224957815970230988593763371397739021076098'
    },
    proofData: {
      publicInput: [],
      publicOutput: [Array],
      maxProofsVerified: 2,
      proof: ''... 25176 more characters
    }
  },
  consensusMPTProof: {
    proof: {
      proof: [Object],
      public_values: [Object],
      sp1_version: 'v5.0.0',
      tee_proof: null
    },
    contract_storage_slots: [ [Object] ]
  }
} object
proofConversionServiceRequest: 355.115ms
consensusMPTProofVerification, consensusMPTProofProof, consensusMPTProofContractStorageSlots {
  vkData: {
    data: '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',
    hash: '16513322678631837892015513717531806224957815970230988593763371397739021076098'
  },
  proofData: {
    publicInput: [],
    publicOutput: [
      '19594871459817890311815084826077886512677908163891963931772364035631220265394',
      '28813061585253647665798682245363167786363076008541480361706775384713283428390',
      '19577506872073961720877787465466736497489877717927057951696476580743274428892'
    ],
    maxProofsVerified: 2,
    proof: ''... 25176 more characters
  }
} {
  proof: {
    Plonk: {
      public_inputs: [Array],
      encoded_proof: '01da8d19ff88edcdea993e5f50e020615bde09135ea63edb6d6de59f0636a51414b477078431b3dc86058afc12e5eff12f193d1efb0d1e7819f89cbaa5c5e8240ba8a7c0e5214340bb23a5b2d5ad9adfe93383707a6474ad0934c60dff9af91d02cab3c6c0c20ace6ffb87c24f4364029e94c42ff139519e754f431e2966f59a0a5089c6d8bdbe308671437555e94e7f9d168edb21c2926706b69f1c8eef18922a5a0441a8156239c086191addd760c6fd93a6053d8726620024b555aa15db3511700bf385b72c0d2c8431ac54b7bf57d14f3679e5b90a3f38eb14f3d1b51fda2beaaf74e3155ec1b260c8136aaf8df9b91166366081e3648d6b28bbbfd736b0231bf199f04f127338567c0f3855ae99699b1a19e2c131f5e7ab155ab06c2fcd2f387e6edda6b08d9d1346486c98e2ebdf0a43c1e7cf8391f04bd3da20dd553a20ad328c2671147ba1e800a2aeb26179eb5223c3ec9941b6cfa19c9bd53bd94f2a5e208647d6199cbf03db0f9831c86fc026a0adab09d0c874d8930648b025bb29c57926c248ec083244a1ac7d85fc48bea4f80f4283a804b0a81a0147794e140fd764802ad1f60d61bbb2fe63bb0b5c383ab0dc64ca6bd61be9bfc6ee077ec71f5f75f011affb8c3facd3f40cb3b329f02b580ce6d144ca564534cb0d0fd162147480ab14057fd5799572536a273372070c2e1e3d1afa56af5bf6d6dc73ccf62bfc4a880bfe086532339dcf2d0c62bfa29522cae87090b6c011168b7271ed0c16a12a4837aeeb530fdae1474eb2269af4670ff90444d1e5f24e7d6cbf9a5b1a2d40796b2ea271fa5d2bf7128c562eadeca447b584d7b23d0775cb221b9dfd2d1c37b8c5cfebb8c1b4abd0c207ef01d82304c822edbd6a233088753bb025c06d02879927a0e84e332c3505105552ff450643d5be6c73ae47ee5c1824eaa754cf08a1a738b11bd837fea4c4f75ede630c9861af3cf117a2beddb6655e8ea49b3614de48b167a5d90033da8e069567763ecff23c517043be52247f136c901f0e642bd3b78cf6fc613b5227472377c32cdf7d151029dbe41ff56be9b03b867fba1e1dde3ffc31509f4ac2e8f8f81f360f0725f30a10d7edbc116c1e0c3b37763e6e1881518297d553d65283979508b8dadf1b04b620581967abef991e26784294f30b707c41d787b724e6005839a968b5d4e9c66148104801c969981494457428f5',
      raw_proof: '01da8d19ff88edcdea993e5f50e020615bde09135ea63edb6d6de59f0636a51414b477078431b3dc86058afc12e5eff12f193d1efb0d1e7819f89cbaa5c5e8240ba8a7c0e5214340bb23a5b2d5ad9adfe93383707a6474ad0934c60dff9af91d02cab3c6c0c20ace6ffb87c24f4364029e94c42ff139519e754f431e2966f59a0a5089c6d8bdbe308671437555e94e7f9d168edb21c2926706b69f1c8eef18922a5a0441a8156239c086191addd760c6fd93a6053d8726620024b555aa15db3516a12a4837aeeb530fdae1474eb2269af4670ff90444d1e5f24e7d6cbf9a5b1a2d40796b2ea271fa5d2bf7128c562eadeca447b584d7b23d0775cb221b9dfd2d11700bf385b72c0d2c8431ac54b7bf57d14f3679e5b90a3f38eb14f3d1b51fda2beaaf74e3155ec1b260c8136aaf8df9b91166366081e3648d6b28bbbfd736b0231bf199f04f127338567c0f3855ae99699b1a19e2c131f5e7ab155ab06c2fcd2f387e6edda6b08d9d1346486c98e2ebdf0a43c1e7cf8391f04bd3da20dd553a20ad328c2671147ba1e800a2aeb26179eb5223c3ec9941b6cfa19c9bd53bd94f2a5e208647d6199cbf03db0f9831c86fc026a0adab09d0c874d8930648b025bb02879927a0e84e332c3505105552ff450643d5be6c73ae47ee5c1824eaa754cf08a1a738b11bd837fea4c4f75ede630c9861af3cf117a2beddb6655e8ea49b36000000072e0c62817f7c60b274ff2d6a24b4e2c10c92b7162f1080483a28e95388f09ed729c57926c248ec083244a1ac7d85fc48bea4f80f4283a804b0a81a0147794e140fd764802ad1f60d61bbb2fe63bb0b5c383ab0dc64ca6bd61be9bfc6ee077ec71f5f75f011affb8c3facd3f40cb3b329f02b580ce6d144ca564534cb0d0fd162147480ab14057fd5799572536a273372070c2e1e3d1afa56af5bf6d6dc73ccf62bfc4a880bfe086532339dcf2d0c62bfa29522cae87090b6c011168b7271ed0c1dde3ffc31509f4ac2e8f8f81f360f0725f30a10d7edbc116c1e0c3b37763e6e14de48b167a5d90033da8e069567763ecff23c517043be52247f136c901f0e642bd3b78cf6fc613b5227472377c32cdf7d151029dbe41ff56be9b03b867fba1e1c37b8c5cfebb8c1b4abd0c207ef01d82304c822edbd6a233088753bb025c06d000000011881518297d553d65283979508b8dadf1b04b620581967abef991e26784294f30b707c41d787b724e6005839a968b5d4e9c66148104801c969981494457428f5',
      plonk_vkey_hash: [Array]
    }
  },
  public_values: { buffer: { data: [Array] } },
  sp1_version: 'v5.0.0',
  tee_proof: null
} [
  {
    slot_key_address: '0xc7e910807dd2e3f49b34efe7133cfb684520da69',
    slot_nested_key_attestation_hash: '0x21f24062c08fba67db16ed638cdae84d4c0d54999439fb0c59956fd6b8c9b96a',
    value: '0xae9f7bcc000'
  }
]
Finding deposit within bundle.consensusMPTProof.contract_storage_slots
Found deposit within bundle.consensusMPTProof.contract_storage_slots
Total deposited to date (hex): 0x00000000000000000000000000000000000000000000000000000ae9f7bcc000
{
  addr: '0xc7e910807dd2e3f49b34efe7133cfb684520da69',
  attr: '0x21f24062c08fba67db16ed638cdae84d4c0d54999439fb0c59956fd6b8c9b96a',
  value: '0x00000000000000000000000000000000000000000000000000000ae9f7bcc000'
}
buildContractDepositLeaves: 4.936ms
leaves [
  3331705326752210865484385278477963001309235147858585399208189122442389544872n
]
getContractDepositWitness: 0.201ms
path []
foldMerkleLeft: 0.065ms
Computed Merkle root: 3331705326752210865484385278477963001309235147858585399208189122442389544872
Loaded sp1PlonkProof and conversionOutputProof
decodedInputs verifiedContractDepositsRoot [
  168, 223,  78,  51, 225, 150, 224, 140,
  193, 170,  59, 101,  92, 228, 159, 239,
  186, 133, 185, 136,  73,  97,   7, 207,
  138, 155,  21, 231, 170, 173,  93,   7
]
Decoded EthInput from MPT proof
Parsing raw SP1 proof using NodeProofLeft.fromJSON
Parsed raw SP1 proof using NodeProofLeft.fromJSON
Computing EthVerifier
newHead slot 5063936
piDigest 28813061585253647665798682245363167786363076008541480361706775384713283428390
proof.publicOutput.rightOut 28813061585253647665798682245363167786363076008541480361706775384713283428390
EthVerifier.compute: 22.538s
All proofs inputs built needed to compute mint proof!
  console.log
    Computed eth verifier and calculated deposit witness.

      at Object.<anonymous> (src/micro/devnet.without-infra.spec.ts:189:17)

  console.log
    Determining user funding status.

      at Object.<anonymous> (src/micro/devnet.without-infra.spec.ts:193:17)

{
  account: undefined,
  error: {
    statusCode: 404,
    statusText: 'fetchAccount: Account with public key B62qpC6aAiVAJehAD8aKeSE3H7MTKixnjRrWboqypFS9cRrRbBuQA68 does not exist.'
  }
}
  console.log
    needsToFundAccount true

      at Object.<anonymous> (src/micro/devnet.without-infra.spec.ts:198:17)

  console.log
    Computing mint proof.

      at Object.<anonymous> (src/micro/devnet.without-infra.spec.ts:200:17)

Minting tokens for user: B62qpC6aAiVAJehAD8aKeSE3H7MTKixnjRrWboqypFS9cRrRbBuQA68
depositAttestationProofRoot ethVerifierStorageProofRoot 3331705326752210865484385278477963001309235147858585399208189122442389544872 3331705326752210865484385278477963001309235147858585399208189122442389544872
contractDepositAttestorPublicInputs value bytes
[
    0n,   0n,   0n, 0n, 0n,  0n,   0n,
    0n,   0n,   0n, 0n, 0n,  0n,   0n,
    0n,   0n,   0n, 0n, 0n,  0n,   0n,
    0n,   0n,   0n, 0n, 0n, 10n, 233n,
  247n, 188n, 192n, 0n
]
contractDepositAttestorProofCredential
15354345367044214131600935236508205003561151324062168867145984717473184332138n
12000000000000 amount to mint
UInt64.Unsafe.fromField(amountToMint) 12000000000000n
depositAttestationProofRoot ethVerifierStorageProofRoot 3331705326752210865484385278477963001309235147858585399208189122442389544872 3331705326752210865484385278477963001309235147858585399208189122442389544872
contractDepositAttestorPublicInputs value bytes
[
    0n,   0n,   0n, 0n, 0n,  0n,   0n,
    0n,   0n,   0n, 0n, 0n,  0n,   0n,
    0n,   0n,   0n, 0n, 0n,  0n,   0n,
    0n,   0n,   0n, 0n, 0n, 10n, 233n,
  247n, 188n, 192n, 0n
]
contractDepositAttestorProofCredential
15354345367044214131600935236508205003561151324062168867145984717473184332138n
12000000000000 amount to mint
UInt64.Unsafe.fromField(amountToMint) 12000000000000n
depositAttestationProofRoot ethVerifierStorageProofRoot 3331705326752210865484385278477963001309235147858585399208189122442389544872 3331705326752210865484385278477963001309235147858585399208189122442389544872
contractDepositAttestorPublicInputs value bytes
[
    0n,   0n,   0n, 0n, 0n,  0n,   0n,
    0n,   0n,   0n, 0n, 0n,  0n,   0n,
    0n,   0n,   0n, 0n, 0n,  0n,   0n,
    0n,   0n,   0n, 0n, 0n, 10n, 233n,
  247n, 188n, 192n, 0n
]
contractDepositAttestorProofCredential
15354345367044214131600935236508205003561151324062168867145984717473184332138n
12000000000000 amount to mint
UInt64.Unsafe.fromField(amountToMint) 12000000000000n
  console.time
    Mint proof computation: 35045 ms

      at Object.<anonymous> (src/micro/devnet.without-infra.spec.ts:212:17)

signedTx...sending {
  transaction: {
    feePayer: {
      body: [Object],
      authorization: '7mXXxFAnG8ykhtXnpAV9UDUVARRgqwDyAo2qhmo9qPNcdd5TkV6EcSJgLresqF968gHTXmkTL1TAUT28xwSyDkAvpBWTdZvf'
    },
    accountUpdates: [
      [AccountUpdate],
      [AccountUpdate],
      [AccountUpdate],
      [AccountUpdate],
      [AccountUpdate],
      [AccountUpdate],
      [AccountUpdate]
    ],
    memo: ''
  },
  sign: [Function: sign],
  prove: [Function: prove],
  toJSON: [Function: toJSON],
  toPretty: [Function: toPretty],
  toGraphqlQuery: [Function: toGraphqlQuery],
  send: [Function: send],
  safeSend: [AsyncFunction: safeSend],
  setFeePerSnarkCost: [Function: setFeePerSnarkCost],
  setFee: [Function: setFee],
  proofs: [
    undefined,
    _a {
      shouldVerify: [Bool],
      publicInput: [Object],
      publicOutput: undefined,
      proof: [Array],
      maxProofsVerified: 1
    },
    _a {
      shouldVerify: [Bool],
      publicInput: [Object],
      publicOutput: undefined,
      proof: [Array],
      maxProofsVerified: 0
    },
    _a {
      shouldVerify: [Bool],
      publicInput: [Object],
      publicOutput: undefined,
      proof: [Array],
      maxProofsVerified: 0
    },
    _a {
      shouldVerify: [Bool],
      publicInput: [Object],
      publicOutput: undefined,
      proof: [Array],
      maxProofsVerified: 1
    },
    undefined,
    undefined
  ]
}
FAIL src/micro/devnet.without-infra.spec.ts (648.292 s)
  e2e_testnet_without_infra
    ✕ e2e_complete_testnet (647154 ms)

  ● e2e_testnet_without_infra › e2e_complete_testnet

    Error: Transaction failed with errors:
    - {"statusCode":200,"statusText":"Couldn't send zkApp command: Stale verification key detected. Please make sure that deployed verification key reflects latest zkApp changes."}

      352 |         const signedTx = __classPrivateFieldGet(this, _ZkAppWorker_mintProofCache, "f").sign([__classPrivateFieldGet(this, _ZkAppWorker_minaPrivateKey, "f")]);
      353 |         console.log('signedTx...sending', signedTx);
    > 354 |         const tx = await signedTx.send();
          |                    ^
      355 |         console.log('Sent tx...waiting', tx);
      356 |         const result = await tx.wait();
      357 |         console.log('Awaited tx');

      at file:/Users/karol/Documents/2nori/nori-bridge-sdk/node_modules/o1js/dist/node/lib/mina/v1/transaction.js:160:27
      at async ZkAppWorker.WALLET_MOCK_signAndSendMintProofCache (file:/Users/karol/Documents/2nori/nori-bridge-sdk/contracts/mina/token-bridge/target/src/micro/workers/zkAppWorker/worker.js:354:20)
      at async WorkerChildBase.onMessage (file:/Users/karol/Documents/2nori/nori-bridge-sdk/workers/build/src/index.js:217:28)
      at WorkerParentBase.onMessage (../../../workers/src/index.ts:191:36)
      at ChildProcess.messageCallback (../../../workers/src/parent/index.node.ts:111:26)

Test Suites: 1 failed, 1 total
Tests:       1 failed, 1 total
Snapshots:   0 total
Time:        648.609 s
Ran all test suites matching /src\/micro\/devnet.without-infra.spec.ts/i.
Force exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?
npm error Lifecycle script `test` failed with error:
npm error code 1
npm error path /Users/karol/Documents/2nori/nori-bridge-sdk/contracts/mina/token-bridge
npm error workspace @nori-zk/mina-token-bridge@0.2.15
npm error location /Users/karol/Documents/2nori/nori-bridge-sdk/contracts/mina/token-bridge
npm error command failed
npm error command sh -c npm run build && node --experimental-vm-modules --experimental-wasm-modules --max-old-space-size=8192 ../../../node_modules/jest/bin/jest.js  --forceExit -- src/micro/devnet.without-infra.spec.ts
