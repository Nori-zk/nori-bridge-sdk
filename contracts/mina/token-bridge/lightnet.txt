
> @nori-zk/mina-token-bridge@0.2.15 test
> npm run build && node --experimental-vm-modules --experimental-wasm-modules --max-old-space-size=8192 ../../../node_modules/jest/bin/jest.js  --forceExit -- src/micro/litenet.without-infra.spec.ts


> @nori-zk/mina-token-bridge@0.2.15 build
> npm run clean && tsc


> @nori-zk/mina-token-bridge@0.2.15 clean
> rimraf target

(node:1312) ExperimentalWarning: VM Modules is an experimental feature and might change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
  console.log
    Deploying contract.

      at Object.<anonymous> (src/micro/litenet.without-infra.spec.ts:21:17)

  console.log
    Compiling all minter dependencies...

      at TokenDeployerWorker.compileMinterDeps (src/micro/workers/tokenDeployer/worker.ts:571:17)

  console.log
    Compiling ethVerifier contract/program.

      at log (../../../o1js-zk-utils/src/utils.ts:237:12)

  console.time
    ethVerifier compiled: 73042 ms

      at timeEnd (../../../o1js-zk-utils/src/utils.ts:240:13)

  console.log
    ethVerifier contract/program vk hash compiled: '18898419980749081858185627310467310990096965437609867313373155526674043887824'

      at log (../../../o1js-zk-utils/src/utils.ts:245:12)

  console.log
    Compiling NoriStorageInterface contract/program.

      at log (../../../o1js-zk-utils/src/utils.ts:237:12)

  console.time
    NoriStorageInterface compiled: 6547 ms

      at timeEnd (../../../o1js-zk-utils/src/utils.ts:240:13)

  console.log
    NoriStorageInterface contract/program vk hash compiled: '14379561584057867225985514309544439368108270617101127551298089924406583258432'

      at log (../../../o1js-zk-utils/src/utils.ts:245:12)

  console.log
    Compiling FungibleToken contract/program.

      at log (../../../o1js-zk-utils/src/utils.ts:237:12)

  console.time
    FungibleToken compiled: 18947 ms

      at timeEnd (../../../o1js-zk-utils/src/utils.ts:240:13)

  console.log
    FungibleToken contract/program vk hash compiled: '4479976700383804842079715154606304731786289694148750471390264665498412376276'

      at log (../../../o1js-zk-utils/src/utils.ts:245:12)

  console.log
    Compiling NoriTokenController contract/program.

      at log (../../../o1js-zk-utils/src/utils.ts:237:12)

  console.time
    NoriTokenController compiled: 33345 ms

      at timeEnd (../../../o1js-zk-utils/src/utils.ts:240:13)

  console.log
    NoriTokenController contract/program vk hash compiled: '23607330731244138319340221129817899603877173033209260313162397855418618735907'

      at log (../../../o1js-zk-utils/src/utils.ts:245:12)

  console.log
    All contracts compiled successfully.

      at log (../../../o1js-zk-utils/src/utils.ts:269:10)

  console.log
    All minter dependency contracts compiled successfully.

      at TokenDeployerWorker.compileMinterDeps (src/micro/workers/tokenDeployer/worker.ts:601:17)

  console.log
    Received new sk from acquire account.

      at IncomingMessage.<anonymous> (src/testUtils.ts:21:33)

  console.log
    senderPrivateKeyBase58 true

      at TokenDeployerWorker.deployContracts (src/micro/workers/tokenDeployer/worker.ts:124:17)

  console.log
    Deploying NoriTokenController and TokenBase contracts...

      at TokenDeployerWorker.deployContracts (src/micro/workers/tokenDeployer/worker.ts:131:17)

  console.log
    Deploy transaction created. Proving...

      at TokenDeployerWorker.deployContracts (src/micro/workers/tokenDeployer/worker.ts:185:17)

  console.log
    Transaction proved. Signing and sending...

      at TokenDeployerWorker.deployContracts (src/micro/workers/tokenDeployer/worker.ts:188:17)

  console.log
    humanizeErrors {
      errors: [],
      replacements: [
        {
          pattern: /\(invalid \(Invalid_proof \\"In progress\\"\)\)/g,
          replacement: 'Stale verification key detected. Please make sure that deployed verification key reflects latest zkApp changes.'
        }
      ]
    }

      at log (../../../node_modules/o1js/src/lib/mina/v1/errors.ts:118:10)

  console.log
    Contracts deployed successfully

      at TokenDeployerWorker.deployContracts (src/micro/workers/tokenDeployer/worker.ts:199:17)

  console.log
    tokenBaseAddressBase58 B62qrJzSk9QqavJEvdF6NJBBFdu2HgSff7MxU26pajATFvgYpUwGXeP

      at Object.<anonymous> (src/micro/litenet.without-infra.spec.ts:62:17)

  console.log
    noriTokenControllerAddressBase58 B62qjJcQCJPe9hmpi1taRX4jXXTght9kQFoG88QV7QQC7WHavsEQ6de

      at Object.<anonymous> (src/micro/litenet.without-infra.spec.ts:63:17)

  console.log
    Received new sk from acquire account.

      at IncomingMessage.<anonymous> (src/testUtils.ts:21:33)

  console.log
    Fetching zkApp worker.

      at Object.<anonymous> (src/micro/litenet.without-infra.spec.ts:89:17)

  console.log
    Compiling dependancies of zkAppWorker

      at Object.<anonymous> (src/micro/litenet.without-infra.spec.ts:93:17)

  console.log
    Awaited compilation of zkAppWorkerReady

      at Object.<anonymous> (src/micro/litenet.without-infra.spec.ts:100:17)

  console.log
    Computing eth verifier and calculating deposit witness.

      at Object.<anonymous> (src/micro/litenet.without-infra.spec.ts:133:17)

  console.log
    codeChallengeBEHex 0x21f24062c08fba67db16ed638cdae84d4c0d54999439fb0c59956fd6b8c9b96a

      at codeChallengeFieldToBEHex (src/micro/pkarm.ts:177:13)

  console.log
    Fetching proof bundle for deposit with block number: 4432612

      at fetchContractWindowSlotProofs (src/micro/depositAttestation.ts:318:13)

  console.log
    fetchResponse GET Response {
      status: 200,
      statusText: 'OK',
      headers: Headers {
        'alt-svc': 'h3=":443"; ma=2592000',
        'content-length': '42881',
        'content-type': 'application/json',
        date: 'Mon, 08 Sep 2025 20:31:19 GMT',
        uwebsockets: '20',
        via: '1.1 Caddy'
      },
      body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true },
      bodyUsed: false,
      ok: true,
      redirected: false,
      type: 'basic',
      url: 'https://pcs.nori.it.com/converted-consensus-mpt-proofs/4432612'
    }

      at proofConversionServiceRequest (src/micro/depositAttestation.ts:307:13)

  console.log
    parsedjson {
      consensusMPTProofVerification: {
        vkData: {
          data: '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',
          hash: '16513322678631837892015513717531806224957815970230988593763371397739021076098'
        },
        proofData: {
          publicInput: [],
          publicOutput: [Array],
          maxProofsVerified: 2,
          proof: ''... 25176 more characters
        }
      },
      consensusMPTProof: {
        proof: {
          proof: [Object],
          public_values: [Object],
          sp1_version: 'v5.0.0',
          tee_proof: null
        },
        contract_storage_slots: [ [Object] ]
      }
    } object

      at proofConversionServiceRequest (src/micro/depositAttestation.ts:309:13)

  console.time
    proofConversionServiceRequest: 336 ms

      at fetchContractWindowSlotProofs (src/micro/depositAttestation.ts:330:13)

  console.log
    consensusMPTProofVerification, consensusMPTProofProof, consensusMPTProofContractStorageSlots {
      vkData: {
        data: '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',
        hash: '16513322678631837892015513717531806224957815970230988593763371397739021076098'
      },
      proofData: {
        publicInput: [],
        publicOutput: [
          '23516748074333400440850139462358328544246179992553132474188065487921649007015',
          '23062243607070694843463835072907765193698704312963795758127611495270157289014',
          '19577506872073961720877787465466736497489877717927057951696476580743274428892'
        ],
        maxProofsVerified: 2,
        proof: 'KChzdGF0ZW1lbnQoKHByb29mX3N0YXRlKChkZWZlcnJlZF92YWx1ZXMoKHBsb25rKChhbHBoYSgoaW5uZXIoNTJiMDRhNGJlZDQxMDMxMyA1ZGQxNjUwMTc1YWRkNDMzKSkpKShiZXRhKGNmNGQzYzc4NWNjYWJkZTMgY2QxODkzNzFmMjRkNGM4MCkpKGdhbW1hKGNkYzk2MTIzYmE0NmUzZDUgZjc2NDhjOTEwOWZmMmE5OCkpKHpldGEoKGlubmVyKDgwNTg3YjVlODk0YjFjYWEgYmE1ODM5MjYzM2ZjNTNiZSkpKSkoam9pbnRfY29tYmluZXIoKSkoZmVhdHVyZV9mbGFncygocmFuZ2VfY2hlY2swIGZhbHNlKShyYW5nZV9jaGVjazEgZmFsc2UpKGZvcmVpZ25fZmllbGRfYWRkIGZhbHNlKShmb3JlaWduX2ZpZWxkX211bCBmYWxzZSkoeG9yIGZhbHNlKShyb3QgZmFsc2UpKGxvb2t1cCBmYWxzZSkocnVudGltZV90YWJsZXMgZmFsc2UpKSkpKShidWxsZXRwcm9vZl9jaGFsbGVuZ2VzKCgocHJlY2hhbGxlbmdlKChpbm5lcig2NzgwM2MyNTM2MWVjZjUxIGExOTJjOTM2NDlmOWRmZmQpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcigzYzU5YWJiNGU5ZWI0NTNmIDE5ZTI5OWJmMTVkNDE4YTApKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcihjN2NmYmJhM2ZmMGUyMTM2IDY5MWY0ZmQ4ODhkYjE0NTEpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcig1MGVlY2Q3MzAwNTcwNzdkIDhhOGY2ZDdhMjRiNTgzN2YpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcig4Mjk3NWFlYTZkMjM1OGJmIGY0NjVhOTZkYmU0NGUzZDUpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcihhMzQ0MzJmMDBmZTFmNzk3IGU4ZDlkZDhhNmNkNjUwNGIpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcihkN2Y4OWY2NzkzOWM0NTFjIGY4NGIyYTcyMGQ1OTY4NjkpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcig4NjcyODk1OWZiMDFmZGZlIGYyZGFlMTI3ZTQzOGEzMmYpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcihjNWQxMGY4MmVmZGEzYjdkIDQ4NjQyMGE3ZGIwZGM5ZTMpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcig1YWFkNzkyN2M4MmM0MjdkIGQxMzAwMjliYWMxZTExZmYpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcihjN2FlN2VkZmJjZmZiOTI1IDI0NDdmYmE2YTJkYmEzZjQpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcihjMzJkZTI3MmRhOWMxM2M1IDgzODRjNzBlZjRkYTE4NWMpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcigxYTBhNmM5NDBlZTdjMmJiIDg5OWU2MDJhZjJkYTU3MmEpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcihjOWE2OWFlMjhkMzIzOGZlIDA2ODcwZjQ4NTE0ODc2NWMpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcigzODA3NmJlNjQ0M2EwZmRiIDEwZTBjZjkzZDYwMTY4OTcpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcigxNDFmODMwZjBjNTgyMmQ2IGI2NDFiNDBmMzBkNTE2YzIpKSkpKSkpKGJyYW5jaF9kYXRhKChwcm9vZnNfdmVyaWZpZWQgTjIpKGRvbWFpbl9sb2cyIlwwMTUiKSkpKSkoc3BvbmdlX2RpZ2VzdF9iZWZvcmVfZXZhbHVhdGlvbnMoM2NhZGMyMDI3YmNjNWQyNSA2NjRmODM4MjU0YzUxMDlmIDAwMTg3ZTNhY2VmN2E2YzcgMGI1YjBjYzMzZDMxYWRiYykpKG1lc3NhZ2VzX2Zvcl9uZXh0X3dyYXBfcHJvb2YoKGNoYWxsZW5nZV9wb2x5bm9taWFsX2NvbW1pdG1lbnQoMHgyNzIyMjM1NjNDNzc3NEYxNUY5OURFNTEwQzg0MUNBMTBBMDVGOTVEMDAxQkMxQzZENjE1QTlGNjk2ODM2NjJCIDB4MzE1MUU5NDA4NEUwMzE2QjRGNDEyODBFMEYzMTk1RTg0OUQ0ODI5OTg1RkM2RDQxQkZFNjkyRjUyQkQ4QTY2NSkpKG9sZF9idWxsZXRwcm9vZl9jaGFsbGVuZ2VzKCgoKHByZWNoYWxsZW5nZSgoaW5uZXIoYjViMmNiZWFhNDA4ZmQ0OCBmNTRjMTkwOGQ2NzlkODY4KSkpKSkoKHByZWNoYWxsZW5nZSgoaW5uZXIoNjRhMGUxOWI5MjYwNDIwNCA1Yjg3NDljMTVhMThkZmI2KSkpKSkoKHByZWNoYWxsZW5nZSgoaW5uZXIoOTVjNWNjYmEyNGNjZjFlMSA0NjJmYjQ4MmY2MzJkMjE2KSkpKSkoKHByZWNoYWxsZW5nZSgoaW5uZXIoZmNmNDFlNzA5YzMxNzc3MSA2MDMwOGVhMTM5ZDdiMWQ4KSkpKSkoKHByZWNoYWxsZW5nZSgoaW5uZXIoOTQyMzY0NTdlMjI2NzBmYyA4MDUxMzZkZWZlNjJlMTMzKSkpKSkoKHByZWNoYWxsZW5nZSgoaW5uZXIoZjQwZGVkYWRmZjllMzNmOCA4N2VlNjZkOWM0NjcxNjFjKSkpKSkoKHByZWNoYWxsZW5nZSgoaW5uZXIoNjdlODE2M2FhZGZiYzEwZiAwY2Q0ZGRkOWY0NTZmNjMyKSkpKSkoKHByZWNoYWxsZW5nZSgoaW5uZXIoZjMzYWQyZmQxNDMzMmQ0MyA5NTFmNjJkMTU4ZmRhOTE0KSkpKSkoKHByZWNoYWxsZW5nZSgoaW5uZXIoZTI2MGNlOGUyYTY5NmU3ZCAxODc5MTRjZWU2MDBmMTdiKSkpKSkoKHByZWNoYWxsZW5nZSgoaW5uZXIoYzlmNTkwN2MzODRkNmFjYSAxZDIzNWI1YzgxM2VjNzBmKSkpKSkoKHByZWNoYWxsZW5nZSgoaW5uZXIoMTFmMzJiYTRjNjJmNWQwZiAxNThmZjJmMmQ5MjBhNWNlKSkpKSkoKHByZWNoYWxsZW5nZSgoaW5uZXIoNTk0MWIwNTdiNTEzNDMwNSAxZThhNmQ3YjZhODhkZjFlKSkpKSkoKHByZWNoYWxsZW5nZSgoaW5uZXIoZjc2NjgwMmQ5Zjc4OTY0MCBiZGZmNGY2YTNmMzhhZjhmKSkpKSkoKHByZWNoYWxsZW5nZSgoaW5uZXIoNWYwMWViMTViOTlmMmZkNSBlOWEzMGFiODE0OTkzYjg4KSkpKSkoKHByZWNoYWxsZW5nZSgoaW5uZXIoM2I2NWM5OGEwNWZiZTU3OCA3MmFkYTNiYjc3YmRmY2VhKSkpKSkpKCgocHJlY2hhbGxlbmdlKChpbm5lcihkMGJjZWE4MWNjMDIyOGQzIDA5ZTRkZGRmZjczMGE4M2QpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcigxNmE3YjViZjZiODE4NDdhIDkyODg4YTM2OTI1MWM4YzkpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcig3ZGYxNTkzYjc4MDY2YjEyIDU3OGU4MTViOThiOGEyNmEpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcig1NzUwY2M5ZjI4NzA0N2YyIDZkZjBlNzMwNDA2ODVlMjIpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcihmMGQ3MmM3YmI2YmJlNjUxIGIxMjY3OWUzMGUyYTgyNjcpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcig2NjYzNTVkNGVjYTA2MDg4IDQwNjFkNGQyYTlhMTc2YTcpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcigwZmU4ODJmODdhYTAwOTJiIGM4N2QxZmQzOTM5Y2UxY2IpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcig3MzkzYTcyZDgwYzVmMDM3IGM5NDVhMzdhYTEyODM3NTYpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcig5ODNkOTQzM2YzZTc0NDk3IGViM2RhOGMzYWJiZDg4OTkpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcihlY2JjYzE4MDlmZWFjMjhiIGY2ZTU0ZjNmNDYyODE3NDkpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcigyYTExMzA5ZDc1OWVkNjZjIDcwMWNkY2I4MDY3YzI1MjgpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcihhNmMzZDhhMTEwY2M2NTg3IDZjZDBiOWFiOWM3MmU3MGYpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcigxMzJlMWZlY2ZlZjM2ZDViIGNkNTlmZjQ2NGQ1Y2E3NDMpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcig2N2NlODNlZjNkOWUxZTc3IDdmMWU5OTIzOGExZDdkNzcpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcigzM2YxZGNiZTliNDM2ZTQzIDljNDlmZGEwNzJiMDI5YzApKSkpKSkpKSkpKSkobWVzc2FnZXNfZm9yX25leHRfc3RlcF9wcm9vZigoYXBwX3N0YXRlKCkpKGNoYWxsZW5nZV9wb2x5bm9taWFsX2NvbW1pdG1lbnRzKCgweDAxRUFERTJDRDM3NzBDNEYwRDhCNDQ1MDUwNEUwRTlGQzAzQTM2QUY4NThBRkZGQUMzMzZGOTEyOUZGMkNDNDAgMHgwNjcxMUQ0N0FCMDJBOURGODlFREQyQjI3N0EzODI4Q0M3NTgyNjMxQTQ4MzI1MUJFN0NGMDNEOEM1NjkzQ0U5KSgweDA5QTlDNUEzRjlDQzZEMzhDQTdGNDAwNUMzNzFBMzEzMkY3NDJGMEVGN0Q1ODlFQTJEMUFENDgwQTMzRDI4NDIgMHgzRjJDMDVBMzhGREUzMDJGQTNGQzg1MDM4NjM3RDAxQTg5QzEwNjk4MjY4RDE4N0IyMTYxMURGQkY3QkE5MEMwKSkpKG9sZF9idWxsZXRwcm9vZl9jaGFsbGVuZ2VzKCgoKHByZWNoYWxsZW5nZSgoaW5uZXIoYWZlYWZmN2NkNjBiNjg5YSAxMDljZmE5M2IwMzU2YTNmKSkpKSkoKHByZWNoYWxsZW5nZSgoaW5uZXIoYjQ1OGNhNDcyNDdhMTMyYiBiZmE4OTc2MzMwMzNhMTExKSkpKSkoKHByZWNoYWxsZW5nZSgoaW5uZXIoNmY0NDk2NzZhM2M0MzA1YiA2ZTYyMGE5ODE1ZDE0N2UxKSkpKSkoKHByZWNoYWxsZW5nZSgoaW5uZXIoNGJhNDJiYjdmZGU2NWFlMiBkMmZiY2E1OGYxMzZkYjEyKSkpKSkoKHByZWNoYWxsZW5nZSgoaW5uZXIoOTMwNzYyMjEzOWJmZTYwZiBlY2QzNmUwYTI4OTkxMDBhKSkpKSkoKHByZWNoYWxsZW5nZSgoaW5uZXIoODM4Mzg2Njk5YmNlNTNjNiBhNGUwNTMzMGE3NjJkNmVjKSkpKSkoKHByZWNoYWxsZW5nZSgoaW5uZXIoMzc1YzEyYTFmYTEzOTQxNiA2MTIzMDA0N2RjODQzMjc0KSkpKSkoKHByZWNoYWxsZW5nZSgoaW5uZXIoZTVhZjQyOTY0ZWM5ZTA5ZSA2MzYwMWMyNDU3NmNiZDhmKSkpKSkoKHByZWNoYWxsZW5nZSgoaW5uZXIoNmRmMDZhMzNiNjExYmQ1MCA4NzBjMzhjY2VlMzdlNWQzKSkpKSkoKHByZWNoYWxsZW5nZSgoaW5uZXIoZGEzNTdkZDg5M2JmMmFlNiA0M2ZlYTYyNjcyODZmNTM0KSkpKSkoKHByZWNoYWxsZW5nZSgoaW5uZXIoMGQ1OTlmZWQzMGNhMWUxNyAzNjhlMzBkZGVlODk2NzllKSkpKSkoKHByZWNoYWxsZW5nZSgoaW5uZXIoYTJmYTlkZDE0YmY5Mzg5ZiBmZjQ4ZTc0ODUxMjQ0N2FjKSkpKSkoKHByZWNoYWxsZW5nZSgoaW5uZXIoOTQ5N2Q4NmYzYzQ4Mjc1ZSBlMmFiNTA3ZDRhZjkwOWE2KSkpKSkoKHByZWNoYWxsZW5nZSgoaW5uZXIoMGY1NTQ4ZTRjMmY3MDhkZSA0ZmU0YjFiOGEwMGIyOWI4KSkpKSkoKHByZWNoYWxsZW5nZSgoaW5uZXIoYWM0Y2VhN2EzZDIwNzdlMiBiYTViZDRkODk4MjhjZGMwKSkpKSkoKHByZWNoYWxsZW5nZSgoaW5uZXIoNWE5YjhlYmNlODM4YjZkYyBhMWU1YjZjMDk0YWMwOThkKSkpKSkpKCgocHJlY2hhbGxlbmdlKChpbm5lcigxY2I4ZWU1NzlkZDZlMGU1IDBhMjVkZTkwZjcyNjNlM2MpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcigwMTZmOTQwZDIxMzNhNzY2IDlkMzhiMGNmZDkzYTNhNGQpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcig1NGM2ZGIyZWJiYWFjZDliIDhiYzMyNjFjMzJkYjE2MDApKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcihhYjhjYmQ4MWQ1ZTA3OTJmIDM1YjZhN2Y5Y2NkM2NhNDgpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcig1MGRjZjNhNDExZTQ2NjdiIDczN2ExMTJkZDBlODNlOWQpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcigzM2M0Y2FiNGM1ZWNkYzE0IDk4ZmQxNjYwMWI5ZTI0YTgpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcig4ODQ3MDY3MTMxNmQxNDVjIDZiODAzYWNjODY5YTk4YzcpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcigzNDlmY2YzMTQ4MzMwNGMwIGMwMTA5MjY5MDI1ZWUwMzApKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcihiZWFiNzlkOWM2MzhkMzEwIGI1MGIxOGIzZTQ3ODUyNTIpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcihkZGE4Y2JmZjk0NTQyNTA2IGEwNzVkY2VmMjU4OTcxOGMpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcihlNDhmMzU0NzUyMWZhZTYzIGIzODQ4YTBmMzRkOTBjZDIpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcihkZjhhYWExYmE4Y2NlMjY0IDc3Yjc0MzM4ZmY5MmM2NGMpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcig2ZTQwNGQ4MjQ2ZDJmNGZmIGFjNDBkZDU0MzIwYmY3MGQpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcig3OGNkMGYyMTVhYThhMjM3IDkyZjY0ZDQyNzZhZmY3OTgpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcigxMDlkNDY5MmY0MWJmMTMwIGIzOGUyZmEwOGNiMjlkNjIpKSkpKSgocHJlY2hhbGxlbmdlKChpbm5lcigyYzdlN2JlNzFjNGM4NTBlIDAzN2RmNjNhYzlmNWU2M2IpKSkpKSkpKSkpKSkocHJldl9ldmFscygoZXZhbHMoKHB1YmxpY19pbnB1dCgweDNDNkRCNjFFODdDQUI0OTEwRUQyMTg0MEFFQzU4QTJEOEFFMUU3MkVFRUVENjUxRDNGRUQyRUFGOTg1QTdDNTkgMHgzQUU2NzIzQjUwQzk2QzA3NThGOEYzOERGMjc1MDI0NDI1RTE1RTYyQTUzM0U4Nzg5REVBNjZEMDE5REFFMjAyKSkoZXZhbHMoKHcoKCgweDM2MzVEMDkxM0QzNzIzMDhBMkFDMTA1QkI3NEI2ODAwRjNBMjkwMzdERDAyQTFFMTFERDgyM0MyQ0ZDMDJEQzYpKDB4MDNFMkM2RjI5MUZCQjIzOTJDRDcwN0YyNTAxQjQxMzI4OUVDRkM5QzMwNkNFQUZDNjJGQjY4ODUxMjJGNUY5NSkpKCgweDNBN0UxQkFCOUI4RjhEMDRFMDNGQkUyOUYyODg2OUQyNjFCMDhCNTI4MkQzNUQxNEM5QjI4QUQ2M0MxQzlFQUEpKDB4MzZFM0JCQzc3MkQwNzJCM0Q4OTUzNkVDQjIxMkU0ODZCNDlCNDYxN0UwQjVDQkM0MkI2QjdGNUVBNzc1NzgxMCkpKCgweDFCNzJGQ0YxMDE2NkVBNUM3QTMwQTlFMDM5RUVGRDlCQjRCRERBNDNDRTc2NUVDOUVFNEI2RjRDNzVFRTdBQUUpKDB4MzA3NUQwQTNENTZCNjVBOUVDOURDRDA0RUQzQTgyMTBGQzcyRjlFRUU5MDgzNzRDMThFNTYzNTYzM0I1MEY4OCkpKCgweDE0RDlGNzYxOTVCNkY5QjMzRDNBMjk1RjQ3RTczOTNGRDA5ODA4QTRFMjZGQTAxNDJGQjgwMzdBMkRGM0REMjYpKDB4MkY1RTREOTU5NEI3QUUwRTNGRjEyM0YyRDcxOUY1MzEyREUzQzgxRDk3M0UxMTI2OTcyOTQ0MEU2M0UzNkIxRSkpKCgweDIxMTQ5QTZBNEFCRTZENzIzMkNEQjY3NkM3QUQ0MjkyMkI3QjlFMUUzMjhDRjc0MDMxQUQ2MUZBNDY0RTg1RkUpKDB4MDA0NDIxRkQ1NjU2RjdBQTJDOEIyQkQ1NzBGRUExREU4REE0MzdENUYyMzA0ODY0NTJCNTEyQTNGQjNCM0NGNykpKCgweDJDNDY2MUFCOEU2RTdGNjVCQjY0M0UwQ0UwNjk4MEQ5MjYzN0FGMURGRkRDRUQ5NDlBN0Q1NjlCQTI0MDU3OTQpKDB4MEY2NEVFREYzNzAwQzk5MkQ0MzZGRDQwNzIzODI4MkJGODU0RjhDNjVCNEY0RkNGREJGOTgzNjlCRDRFNjExQikpKCgweDFEQURGNjRDMzAzQTAyNjU2RkM1NDk4RDYyMzBBOUYzM0UxMkUwNDhENDcxRUZEQTVGNDM3NkI4Q0Y0ODE1RDgpKDB4MDVFQ0E0MjgyNDU5NUFFQjgzOUJDOURCNDQ5ODYzMUNCOTRGNzlEQUY4RDYxOEUyN0I0QkU1NjU2ODFDQkE2QikpKCgweDE5QUJDNjg1REVCQTg1ODcxREFDRTlBQzBDOUQ5M0U0NkJBNzlERkFEOTU1NDk1RTJBQTA2MTVGNDM0RTM5MTUpKDB4MEU2REZFNkExOTNFNzdGRjFGMjc2ODk5RTcwMjhDRTk2MjdDRjNFNjhENEIwREVCM0E2N0E0NDdGOTZFMEFDNikpKCgweDBDMDEwRjlEQTRCRDQwRDZGOEJCNzZGMDU3RUVGQjdFRTY2OUY3MTlFOTBDNDUyMjQ1OEY5RjdFREU3QTREQzYpKDB4MTAzOTgwQTI5NTNGQTg4RTY4MzMxRkY4N0RBOTM5MUIzOEFFQUI4RjY5OTE2OTlGMDVGMzMzM0MwQzU5QTAyQikpKCgweDNDMjREMUQ1NTg5RDRCQzM3OUYxQTk0NDYxMEUzQzQzQjdCN0QxRDg5NTY0MzdCOTc3NENGOTI5MzAxNTYyMUMpKDB4MUU0MEY4NTc5MTYzRTM5OURBMTQ4MjI1NzA0QTc0NDQ4QkY5NEYxNUQ1REUyNTYxRTIwMjE2N0YyMjkyQTQ5QikpKCgweDNCOERGMjY5MjBBNDZCMEFFOENCNTEwNEYyMUY0NzVF'... 25176 more characters
      }
    } {
      proof: {
        Plonk: {
          public_inputs: [Array],
          encoded_proof: '2c4d7b53da67b4731c66e570bcc69b2e0486bd97301368a4c89b5f07ab9397f42f689297064b449279aec1b5f68c7003f86d0eae418f1f208b2492a2260b2e342c69cf637820ebd2ac30056a1947ee0e6a76e3698ff6d215b79653fd0699e832239b4ad23610585f2f6924c1eabf950041e4fdc967b09bdbe44c28ec864137fd0bb5d0ce4017782bb7ea95afdbb45731213cb25cde937b42c3985250f8c5ded502f8353721ae43e8587908e11c3445b4f29e7484d8c7d528060dfac0bc3b2a220b7b83da6c04d8a55fd2aea7303e303423c492cb118e27a7be8403e194ef2dc808eec4aa27ad2a5abc57f6104e3d3944dd7be20075efa5bb86d57809802b5fa127287c06cd5e03a1efa0f1f56b2e9e5121f29c99f71bea16e42783b0f7b5c47d11bd2525acec64f9bf8ed0fc918ba8085df5f0e22aa48546b54583cb50d893450b884d7caf9df38db351b58ed3e3766a7e26db4a557fe9479c1675cfa5eec4461de4553bd9a3f9354e84c4dffcd5e1be1845c8d59bc39196d217fd5339e8ec4414cba0aaf3575e37eb18285c07360eabbd7e0f363fdaba5f5a0381f243cffddb1f36e75d76d2c84446b1158323b9108c2dfd9530653ea859ad3f808e59629c330ca8d78912f050915af08f35b93900e1b28bdf640fdc7a6cc97750fed00ab18e1f91c09ae3eafb6fd2e404a0fe77d9bfa5fe41ccc3a101377743e512b3920e8f1ed043222997916fd69663956b66ec433c4bd72eec82e2f1aac0f9e17a8205b92970326ba5536bf13d369f3b224f7ea80953c8018539e805e46110321eadf9e62219e9d6cbbf04b3b517f80000fb2b17ae3ad46c8591a6851ba8a3a4b3405a6902a9b2c44c9ff2c6d0e26a7d522cbbb14658a04cc5d832d884d77982be8e8c0925c203e5320a6662b793be846a36f441be96bc26a566e9d547405ef59cfa03880078aea9c82ec9121a69cc2fbe6e8da14b11e77dad283fdb5bd536ce7fa0e406154d9831f876bf8a690aec3e3bf502b7698cf5ba6f687957791365ef34d02a102312ec49cdcb3c4d090c99873107357ff2ce0af162a01404a3a23a2ec633cb17221d9be880d400c56e4587d11fe7a74e196b591d8debbfdb9f9841c9e8a3687a04e25b52d8a9820f7b393d7adfac494d2d804ad587d8aaa0896afcffa8a34e4211863c2ddcd31a9b296f9680cf03a6a35787290cd584f935841d21bc27b95018',
          raw_proof: '2c4d7b53da67b4731c66e570bcc69b2e0486bd97301368a4c89b5f07ab9397f42f689297064b449279aec1b5f68c7003f86d0eae418f1f208b2492a2260b2e342c69cf637820ebd2ac30056a1947ee0e6a76e3698ff6d215b79653fd0699e832239b4ad23610585f2f6924c1eabf950041e4fdc967b09bdbe44c28ec864137fd0bb5d0ce4017782bb7ea95afdbb45731213cb25cde937b42c3985250f8c5ded502f8353721ae43e8587908e11c3445b4f29e7484d8c7d528060dfac0bc3b2a222970326ba5536bf13d369f3b224f7ea80953c8018539e805e46110321eadf9e62219e9d6cbbf04b3b517f80000fb2b17ae3ad46c8591a6851ba8a3a4b3405a690b7b83da6c04d8a55fd2aea7303e303423c492cb118e27a7be8403e194ef2dc808eec4aa27ad2a5abc57f6104e3d3944dd7be20075efa5bb86d57809802b5fa127287c06cd5e03a1efa0f1f56b2e9e5121f29c99f71bea16e42783b0f7b5c47d11bd2525acec64f9bf8ed0fc918ba8085df5f0e22aa48546b54583cb50d893450b884d7caf9df38db351b58ed3e3766a7e26db4a557fe9479c1675cfa5eec4461de4553bd9a3f9354e84c4dffcd5e1be1845c8d59bc39196d217fd5339e8ec4425c203e5320a6662b793be846a36f441be96bc26a566e9d547405ef59cfa03880078aea9c82ec9121a69cc2fbe6e8da14b11e77dad283fdb5bd536ce7fa0e4060000000724983deec0ce3d769af1199cf3d415ba46747033787324c842ad93ccfe4528c414cba0aaf3575e37eb18285c07360eabbd7e0f363fdaba5f5a0381f243cffddb1f36e75d76d2c84446b1158323b9108c2dfd9530653ea859ad3f808e59629c330ca8d78912f050915af08f35b93900e1b28bdf640fdc7a6cc97750fed00ab18e1f91c09ae3eafb6fd2e404a0fe77d9bfa5fe41ccc3a101377743e512b3920e8f1ed043222997916fd69663956b66ec433c4bd72eec82e2f1aac0f9e17a8205b9221d9be880d400c56e4587d11fe7a74e196b591d8debbfdb9f9841c9e8a3687a154d9831f876bf8a690aec3e3bf502b7698cf5ba6f687957791365ef34d02a102312ec49cdcb3c4d090c99873107357ff2ce0af162a01404a3a23a2ec633cb1702a9b2c44c9ff2c6d0e26a7d522cbbb14658a04cc5d832d884d77982be8e8c090000000104e25b52d8a9820f7b393d7adfac494d2d804ad587d8aaa0896afcffa8a34e4211863c2ddcd31a9b296f9680cf03a6a35787290cd584f935841d21bc27b95018',
          plonk_vkey_hash: [Array]
        }
      },
      public_values: { buffer: { data: [Array] } },
      sp1_version: 'v5.0.0',
      tee_proof: null
    } [
      {
        slot_key_address: '0xc7e910807dd2e3f49b34efe7133cfb684520da69',
        slot_nested_key_attestation_hash: '0x21f24062c08fba67db16ed638cdae84d4c0d54999439fb0c59956fd6b8c9b96a',
        value: '0xa012317b000'
      }
    ]

      at fetchContractWindowSlotProofs (src/micro/depositAttestation.ts:332:13)

  console.log
    Finding deposit within bundle.consensusMPTProof.contract_storage_slots

      at computeDepositAttestationWitnessAndEthVerifier (src/micro/depositAttestation.ts:361:13)

  console.log
    Found deposit within bundle.consensusMPTProof.contract_storage_slots

      at computeDepositAttestationWitnessAndEthVerifier (src/micro/depositAttestation.ts:388:13)

  console.log
    Total deposited to date (hex): 0x00000000000000000000000000000000000000000000000000000a012317b000

      at computeDepositAttestationWitnessAndEthVerifier (src/micro/depositAttestation.ts:394:13)

  console.log
    {
      addr: '0xc7e910807dd2e3f49b34efe7133cfb684520da69',
      attr: '0x21f24062c08fba67db16ed638cdae84d4c0d54999439fb0c59956fd6b8c9b96a',
      value: '0x00000000000000000000000000000000000000000000000000000a012317b000'
    }

      at src/micro/depositAttestation.ts:402:21
          at Array.map (<anonymous>)

  console.time
    buildContractDepositLeaves: 1 ms

      at computeDepositAttestationWitnessAndEthVerifier (src/micro/depositAttestation.ts:415:13)

  console.log
    leaves [
      8481317459075459008159620784642867093502662509102572029257033827959460120173n
    ]

      at computeDepositAttestationWitnessAndEthVerifier (src/micro/depositAttestation.ts:416:13)

  console.time
    getContractDepositWitness: 0 ms

      at computeDepositAttestationWitnessAndEthVerifier (src/micro/depositAttestation.ts:432:13)

  console.log
    path []

      at computeDepositAttestationWitnessAndEthVerifier (src/micro/depositAttestation.ts:433:13)

  console.time
    foldMerkleLeft: 0 ms

      at computeDepositAttestationWitnessAndEthVerifier (src/micro/depositAttestation.ts:446:13)

  console.log
    Computed Merkle root: 8481317459075459008159620784642867093502662509102572029257033827959460120173

      at computeDepositAttestationWitnessAndEthVerifier (src/micro/depositAttestation.ts:447:13)

  console.log
    Loaded sp1PlonkProof and conversionOutputProof

      at computeDepositAttestationWitnessAndEthVerifier (src/micro/depositAttestation.ts:449:13)

  console.log
    decodedInputs verifiedContractDepositsRoot [
      109, 198, 156,  66, 212, 123,  26,
      225, 249,   4, 247, 180, 114, 158,
      234,  12,  23, 175, 105, 240,  96,
      231, 195, 106, 253,  69, 242, 217,
      108,  65, 192,  18
    ]

      at computeDepositAttestationWitnessAndEthVerifier (src/micro/depositAttestation.ts:451:13)

  console.log
    Decoded EthInput from MPT proof

      at computeDepositAttestationWitnessAndEthVerifier (src/micro/depositAttestation.ts:458:13)

  console.log
    Parsing raw SP1 proof using NodeProofLeft.fromJSON

      at computeDepositAttestationWitnessAndEthVerifier (src/micro/depositAttestation.ts:460:13)

  console.log
    Parsed raw SP1 proof using NodeProofLeft.fromJSON

      at computeDepositAttestationWitnessAndEthVerifier (src/micro/depositAttestation.ts:465:13)

  console.log
    Computing EthVerifier

      at computeDepositAttestationWitnessAndEthVerifier (src/micro/depositAttestation.ts:467:13)

  console.log
    newHead slot 5063744

      at log (../../../node_modules/o1js/src/lib/provable/provable.ts:419:13)

  console.log
    piDigest 23062243607070694843463835072907765193698704312963795758127611495270157289014

      at log (../../../node_modules/o1js/src/lib/provable/provable.ts:419:13)

  console.log
    proof.publicOutput.rightOut 23062243607070694843463835072907765193698704312963795758127611495270157289014

      at log (../../../node_modules/o1js/src/lib/provable/provable.ts:419:13)

  console.time
    EthVerifier.compute: 26376 ms

      at computeDepositAttestationWitnessAndEthVerifier (src/micro/depositAttestation.ts:472:13)

  console.log
    Verifying EthVerifier proof

      at computeDepositAttestationWitnessAndEthVerifier (src/micro/depositAttestation.ts:474:13)

  console.log
    Verified EthVerifier proof

      at computeDepositAttestationWitnessAndEthVerifier (src/micro/depositAttestation.ts:476:13)

  console.log
    All proofs inputs built needed to compute mint proof!

      at computeDepositAttestationWitnessAndEthVerifier (src/micro/depositAttestation.ts:478:13)

  console.log
    Computed eth verifier and calculated deposit witness.

      at Object.<anonymous> (src/micro/litenet.without-infra.spec.ts:140:17)

  console.log
    Mint setup

      at Object.<anonymous> (src/micro/litenet.without-infra.spec.ts:148:17)

  console.log
    MOCK_setupStorage called with {
      userPublicKeyBase58: 'B62qpnp9WzC6uonwn9cnK2TKXwg6758bCSLnirnRVCAMGFai5tsNNPH',
      noriTokenControllerAddressBase58: 'B62qjJcQCJPe9hmpi1taRX4jXXTght9kQFoG88QV7QQC7WHavsEQ6de',
      txFee: 100000000,
      storageInterfaceVerificationKeySafe: {
        hashStr: '14379561584057867225985514309544439368108270617101127551298089924406583258432',
        data: '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'
      }
    }

      at TokenDeployerWorker.MOCK_setupStorage (src/micro/workers/tokenDeployer/worker.ts:474:17)

  console.log
    Setting up storage for user: B62qpnp9WzC6uonwn9cnK2TKXwg6758bCSLnirnRVCAMGFai5tsNNPH

      at TokenDeployerWorker.MOCK_setupStorage (src/micro/workers/tokenDeployer/worker.ts:493:17)

  console.log
    fetched accounts

      at TokenDeployerWorker.MOCK_setupStorage (src/micro/workers/tokenDeployer/worker.ts:498:17)

  console.log
    got token controller inst

      at TokenDeployerWorker.MOCK_setupStorage (src/micro/workers/tokenDeployer/worker.ts:504:17)

  console.log
    setup tx

      at TokenDeployerWorker.MOCK_setupStorage (src/micro/workers/tokenDeployer/worker.ts:517:17)

  console.log
    provedTx {
      transaction: {
        feePayer: {
          body: [Object],
          authorization: '7mWxjLYgbJUkZNcGouvhVj5tJ8yu9hoexb9ntvPK8t5LHqzmrL6QJjjKtf5SgmxB4QWkDw7qoMMbbNGtHVpsbJHPyTy2EzRQ',
          lazyAuthorization: [Object]
        },
        accountUpdates: [ [AccountUpdate], [AccountUpdate], [AccountUpdate] ],
        memo: ''
      },
      sign: [Function: sign],
      prove: [Function: prove],
      toJSON: [Function: toJSON],
      toPretty: [Function: toPretty],
      toGraphqlQuery: [Function: toGraphqlQuery],
      send: [Function: send],
      safeSend: [AsyncFunction: safeSend],
      setFeePerSnarkCost: [Function: setFeePerSnarkCost],
      setFee: [Function: setFee],
      proofs: [
        undefined,
        _a {
          shouldVerify: [Bool],
          publicInput: [Object],
          publicOutput: undefined,
          proof: [Array],
          maxProofsVerified: 1
        },
        undefined
      ]
    }

      at TokenDeployerWorker.MOCK_setupStorage (src/micro/workers/tokenDeployer/worker.ts:521:17)

  console.log
    this.#minaPrivateKey PrivateKey {
      s: Scalar {
        lowBit: Bool { value: [Array] },
        high254: Field { value: [Array] }
      }
    }

      at TokenDeployerWorker.MOCK_setupStorage (src/micro/workers/tokenDeployer/worker.ts:523:17)

  console.log
    humanizeErrors {
      errors: [],
      replacements: [
        {
          pattern: /\(invalid \(Invalid_proof \\"In progress\\"\)\)/g,
          replacement: 'Stale verification key detected. Please make sure that deployed verification key reflects latest zkApp changes.'
        }
      ]
    }

      at log (../../../node_modules/o1js/src/lib/mina/v1/errors.ts:118:10)

  console.log
    sent

      at TokenDeployerWorker.MOCK_setupStorage (src/micro/workers/tokenDeployer/worker.ts:525:17)

  console.log
    result {
      status: 'included',
      transaction: {
        feePayer: {
          body: [Object],
          authorization: '7mXUGCi45nY9qByHecy9g69XqLZ4sU96gXgMg5xEoV1xgpyWdPtu7TjGeKTDAFJYwpw41MNyzukt9hArT5KumB9qTfQiB9Z9'
        },
        accountUpdates: [ [AccountUpdate], [AccountUpdate], [AccountUpdate] ],
        memo: ''
      },
      toJSON: [Function: toJSON],
      toPretty: [Function: toPretty],
      hash: '5JtqEsgwWcLa5FGv6paZ2m6PQw4ZtNKH7HfJ3mihKPnT6KmsouSm',
      data: { sendZkapp: { zkapp: [Object] } }
    }

      at TokenDeployerWorker.MOCK_setupStorage (src/micro/workers/tokenDeployer/worker.ts:527:17)

  console.log
    Storage setup completed successfully

      at TokenDeployerWorker.MOCK_setupStorage (src/micro/workers/tokenDeployer/worker.ts:528:17)

  console.log
    setupTxHash 5JtqEsgwWcLa5FGv6paZ2m6PQw4ZtNKH7HfJ3mihKPnT6KmsouSm

      at Object.<anonymous> (src/micro/litenet.without-infra.spec.ts:175:17)

  console.time
    noriMinter.setupStorage: 51438 ms

      at Object.<anonymous> (src/micro/litenet.without-infra.spec.ts:176:17)

  console.log
    Determining user funding status.

      at Object.<anonymous> (src/micro/litenet.without-infra.spec.ts:180:17)

  console.log
    {
      account: undefined,
      error: {
        statusCode: 404,
        statusText: 'fetchAccount: Account with public key B62qpnp9WzC6uonwn9cnK2TKXwg6758bCSLnirnRVCAMGFai5tsNNPH does not exist.'
      }
    }

      at TokenDeployerWorker.needsToFundAccount (src/micro/workers/tokenDeployer/worker.ts:549:21)

  console.log
    needsToFundAccount true

      at Object.<anonymous> (src/micro/litenet.without-infra.spec.ts:185:17)

  console.log
    verify proof...

      at TokenDeployerWorker.MOCK_mint (src/micro/workers/tokenDeployer/worker.ts:694:17)

  console.log
    proof verified

      at TokenDeployerWorker.MOCK_mint (src/micro/workers/tokenDeployer/worker.ts:696:17)

  console.log
    Minting tokens for user: B62qpnp9WzC6uonwn9cnK2TKXwg6758bCSLnirnRVCAMGFai5tsNNPH

      at TokenDeployerWorker.MOCK_mint (src/micro/workers/tokenDeployer/worker.ts:707:17)

  console.log
    depositAttestationProofRoot ethVerifierStorageProofRoot 8481317459075459008159620784642867093502662509102572029257033827959460120173 8481317459075459008159620784642867093502662509102572029257033827959460120173

      at log (../../../node_modules/o1js/src/lib/provable/provable.ts:419:13)

  console.log
    contractDepositAttestorPublicInputs value bytes

      at src/micro/depositAttestation.ts:243:17

  console.log
    [
       0n,  0n,   0n, 0n, 0n,  0n, 0n,
       0n,  0n,   0n, 0n, 0n,  0n, 0n,
       0n,  0n,   0n, 0n, 0n,  0n, 0n,
       0n,  0n,   0n, 0n, 0n, 10n, 1n,
      35n, 23n, 176n, 0n
    ]

      at src/micro/depositAttestation.ts:244:17

  console.log
    contractDepositAttestorProofCredential

      at src/micro/depositAttestation.ts:249:17

  console.log
    15354345367044214131600935236508205003561151324062168867145984717473184332138n

      at src/micro/depositAttestation.ts:250:17

  console.log
    11000000000000 amount to mint

      at log (../../../node_modules/o1js/src/lib/provable/provable.ts:419:13)

  console.log
    depositAttestationProofRoot ethVerifierStorageProofRoot 8481317459075459008159620784642867093502662509102572029257033827959460120173 8481317459075459008159620784642867093502662509102572029257033827959460120173

      at log (../../../node_modules/o1js/src/lib/provable/provable.ts:419:13)

  console.log
    contractDepositAttestorPublicInputs value bytes

      at src/micro/depositAttestation.ts:243:17

  console.log
    [
       0n,  0n,   0n, 0n, 0n,  0n, 0n,
       0n,  0n,   0n, 0n, 0n,  0n, 0n,
       0n,  0n,   0n, 0n, 0n,  0n, 0n,
       0n,  0n,   0n, 0n, 0n, 10n, 1n,
      35n, 23n, 176n, 0n
    ]

      at src/micro/depositAttestation.ts:244:17

  console.log
    contractDepositAttestorProofCredential

      at src/micro/depositAttestation.ts:249:17

  console.log
    15354345367044214131600935236508205003561151324062168867145984717473184332138n

      at src/micro/depositAttestation.ts:250:17

  console.log
    11000000000000 amount to mint

      at log (../../../node_modules/o1js/src/lib/provable/provable.ts:419:13)

  console.log
    depositAttestationProofRoot ethVerifierStorageProofRoot 8481317459075459008159620784642867093502662509102572029257033827959460120173 8481317459075459008159620784642867093502662509102572029257033827959460120173

      at log (../../../node_modules/o1js/src/lib/provable/provable.ts:419:13)

  console.log
    contractDepositAttestorPublicInputs value bytes

      at src/micro/depositAttestation.ts:243:17

  console.log
    [
       0n,  0n,   0n, 0n, 0n,  0n, 0n,
       0n,  0n,   0n, 0n, 0n,  0n, 0n,
       0n,  0n,   0n, 0n, 0n,  0n, 0n,
       0n,  0n,   0n, 0n, 0n, 10n, 1n,
      35n, 23n, 176n, 0n
    ]

      at src/micro/depositAttestation.ts:244:17

  console.log
    contractDepositAttestorProofCredential

      at src/micro/depositAttestation.ts:249:17

  console.log
    15354345367044214131600935236508205003561151324062168867145984717473184332138n

      at src/micro/depositAttestation.ts:250:17

  console.log
    11000000000000 amount to mint

      at log (../../../node_modules/o1js/src/lib/provable/provable.ts:419:13)

  console.log
    humanizeErrors {
      errors: [
        `{"statusCode":200,"statusText":"Couldn't send zkApp command: (invalid (Invalid_proof \\"In progress\\"))"}`
      ],
      replacements: [
        {
          pattern: /\(invalid \(Invalid_proof \\"In progress\\"\)\)/g,
          replacement: 'Stale verification key detected. Please make sure that deployed verification key reflects latest zkApp changes.'
        }
      ]
    }

      at log (../../../node_modules/o1js/src/lib/mina/v1/errors.ts:118:10)

FAIL src/micro/litenet.without-infra.spec.ts (347.978 s)
  e2e-without-infra
    ✕ e2e_complete (346556 ms)

  ● e2e-without-infra › e2e_complete

    Transaction failed with errors:
    - {"statusCode":200,"statusText":"Couldn't send zkApp command: Stale verification key detected. Please make sure that deployed verification key reflects latest zkApp changes."}

      729 |
      730 |         const provedTx = await mintTx.prove();
    > 731 |         const tx = await provedTx.sign([this.#minaPrivateKey]).send();
          |                    ^
      732 |         const result = await tx.wait();
      733 |         console.log('Minting completed successfully');
      734 |

      at Error (../../../node_modules/o1js/src/lib/mina/v1/transaction.ts:533:17)
      at TokenDeployerWorker.MOCK_mint (src/micro/workers/tokenDeployer/worker.ts:731:20)
      at Object.<anonymous> (src/micro/litenet.without-infra.spec.ts:188:40)

Test Suites: 1 failed, 1 total
Tests:       1 failed, 1 total
Snapshots:   0 total
Time:        348.382 s
Ran all test suites matching /src\/micro\/litenet.without-infra.spec.ts/i.
Force exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?
npm error Lifecycle script `test` failed with error:
npm error code 1
npm error path /Users/karol/Documents/2nori/nori-bridge-sdk/contracts/mina/token-bridge
npm error workspace @nori-zk/mina-token-bridge@0.2.15
npm error location /Users/karol/Documents/2nori/nori-bridge-sdk/contracts/mina/token-bridge
npm error command failed
npm error command sh -c npm run build && node --experimental-vm-modules --experimental-wasm-modules --max-old-space-size=8192 ../../../node_modules/jest/bin/jest.js  --forceExit -- src/micro/litenet.without-infra.spec.ts
