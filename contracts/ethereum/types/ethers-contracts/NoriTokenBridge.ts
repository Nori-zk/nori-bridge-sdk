/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  

  export interface NoriTokenBridgeInterface extends Interface {
    getFunction(nameOrSignature: "bridgeOperator" | "lockTokens" | "lockedTokens"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "TokensLocked"): EventFragment;

    encodeFunctionData(functionFragment: 'bridgeOperator', values?: undefined): string;
encodeFunctionData(functionFragment: 'lockTokens', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'lockedTokens', values: [AddressLike, BigNumberish]): string;

    decodeFunctionResult(functionFragment: 'bridgeOperator', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'lockTokens', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'lockedTokens', data: BytesLike): Result;
  }

  
    export namespace TokensLockedEvent {
      export type InputTuple = [user: AddressLike, attestationHash: BigNumberish, amount: BigNumberish, when: BigNumberish];
      export type OutputTuple = [user: string, attestationHash: bigint, amount: bigint, when: bigint];
      export interface OutputObject {user: string, attestationHash: bigint, amount: bigint, when: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface NoriTokenBridge extends BaseContract {
    
    connect(runner?: ContractRunner | null): NoriTokenBridge;
    waitForDeployment(): Promise<this>;

    interface: NoriTokenBridgeInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    bridgeOperator: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    lockTokens: TypedContractMethod<
      [attestationHash: BigNumberish, ],
      [void],
      'payable'
    >
    

    
    lockedTokens: TypedContractMethod<
      [arg0: AddressLike, arg1: BigNumberish, ],
      [bigint],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'bridgeOperator'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'lockTokens'): TypedContractMethod<
      [attestationHash: BigNumberish, ],
      [void],
      'payable'
    >;
getFunction(nameOrSignature: 'lockedTokens'): TypedContractMethod<
      [arg0: AddressLike, arg1: BigNumberish, ],
      [bigint],
      'view'
    >;

    getEvent(key: 'TokensLocked'): TypedContractEvent<TokensLockedEvent.InputTuple, TokensLockedEvent.OutputTuple, TokensLockedEvent.OutputObject>;

    filters: {
      
      'TokensLocked(address,uint256,uint256,uint256)': TypedContractEvent<TokensLockedEvent.InputTuple, TokensLockedEvent.OutputTuple, TokensLockedEvent.OutputObject>;
      TokensLocked: TypedContractEvent<TokensLockedEvent.InputTuple, TokensLockedEvent.OutputTuple, TokensLockedEvent.OutputObject>;
    
    };
  }